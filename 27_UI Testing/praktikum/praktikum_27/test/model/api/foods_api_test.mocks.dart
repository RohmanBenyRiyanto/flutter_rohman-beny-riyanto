// Mocks generated by Mockito 5.1.0 from annotations
// in praktikum_25/test/model/api/foods_api_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:praktikum_25/models/food_model.dart' as _i4;
import 'package:praktikum_25/models/food_services/food_services.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [FoodServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodServices extends _i1.Mock implements _i2.FoodServices {
  MockFoodServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  set baseUrl(String? _baseUrl) =>
      super.noSuchMethod(Invocation.setter(#baseUrl, _baseUrl),
          returnValueForMissingStub: null);
  @override
  _i3.Future<List<_i4.FoodModel>> getFoods() =>
      (super.noSuchMethod(Invocation.method(#getFoods, []),
              returnValue: Future<List<_i4.FoodModel>>.value(<_i4.FoodModel>[]))
          as _i3.Future<List<_i4.FoodModel>>);
}
